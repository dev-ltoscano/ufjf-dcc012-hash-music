package br.ufjf.ed.hashmusic.viewmodel;

import br.ufjf.ed.hashmusic.model.MusicInfo;
import br.ufjf.ed.hashmusic.repository.Mp3Repository;
import br.ufjf.ed.hashmusic.sort.MergeSort;
import br.ufjf.ed.hashmusic.viewmodel.component.TableMusicInfoComparatorChange;
import br.ufjf.ed.hashmusic.viewmodel.component.comparator.MusicInfoAlbumComparator;
import br.ufjf.ed.hashmusic.viewmodel.component.comparator.MusicInfoArtistAlbumAndTitleComparator;
import br.ufjf.ed.hashmusic.viewmodel.component.comparator.MusicInfoArtistAndAlbumComparator;
import br.ufjf.ed.hashmusic.viewmodel.component.comparator.MusicInfoArtistComparator;
import br.ufjf.ed.hashmusic.viewmodel.component.comparator.MusicInfoTitleComparator;
import br.ufjf.ed.hashmusic.viewmodel.component.event.TableColumnClickListener;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.Comparator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luis Augusto
 */
public class ReportWindow extends javax.swing.JFrame 
{
    private Mp3Repository repository;
    private Comparator<MusicInfo> comparator;
    
    /**
     * Creates new form ReportWindow
     */
    public ReportWindow()
    {
        initComponents();
        setLocationRelativeTo(null);
        tableList.setColumnSelectionAllowed(true);
        
        try 
        {
            this.repository = new Mp3Repository();
            this.repository.loadRepository();
            
            this.comparator = new MusicInfoArtistComparator();
            this.loadItems();
        } 
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(null, "Nenhuma música adicionada no repositório!");
        }

        TableColumnClickListener columnClickListener = new TableColumnClickListener(new TableMusicInfoComparatorChange()
        {
            @Override
            public void call(Object... params) 
            {
                if ((params != null) && (params.length == 1))
                {
                    String name = "";
                    int[] columnSelected = tableList.getSelectedColumns();
                    
                    if (columnSelected.length == 0) 
                    {
                        MouseEvent event = (MouseEvent)params[0];
                        int column = tableList.columnAtPoint(event.getPoint());
                        name = String.format("%s%s", tableList.getColumnName(column), "#");
                    }
                    else 
                    {
                        for (int i = 0; i < columnSelected.length; i++) 
                        {
                            name = name.concat(String.format("%s%s", tableList.getColumnName(columnSelected[i]), "#"));
                        }
                    }

                    switch (name) 
                    {
                        case "Artista#":
                            comparator = new MusicInfoArtistComparator();
                            break;
                        case "Álbum#":
                            comparator = new MusicInfoAlbumComparator();
                            break;
                        case "Título#":
                            comparator = new MusicInfoTitleComparator();
                            break;
                        case "Artista#Álbum#":
                            comparator = new MusicInfoArtistAndAlbumComparator();
                            break;
                        case "Artista#Álbum#Título#":
                            comparator = new MusicInfoArtistAlbumAndTitleComparator();
                            break;
                    }
                    
                    loadItems();
                }
            }
        });

        this.tableList.getTableHeader().addMouseListener(columnClickListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        tableList = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Artista", "Álbum", "Título"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane.setViewportView(tableList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReportWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReportWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReportWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReportWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReportWindow().setVisible(true);
            }
        });
    }
    
    private void loadItems()
    {
        DefaultTableModel modelList = new DefaultTableModel();
        
        modelList.addColumn("Artista");
        modelList.addColumn("Álbum");
        modelList.addColumn("Título");

        MergeSort mergeSort = new MergeSort();
        List<MusicInfo> musicInfoList = mergeSort.sort(repository.getRepositoryList(), comparator);

        for(MusicInfo info : musicInfoList)
        {
            modelList.addRow(new Object[] { info.getArtist(), info.getAlbum(), info.getTitle() });
        }

        this.tableList.setModel(modelList);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tableList;
    // End of variables declaration//GEN-END:variables
}
